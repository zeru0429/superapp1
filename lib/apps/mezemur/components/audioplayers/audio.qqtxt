import 'dart:async';
import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/material.dart';

class PlayMezemur extends StatefulWidget {
  final String audioUrl;

  const PlayMezemur({
    required this.audioUrl,
    Key? key,
  }) : super(key: key);

  @override
  State<PlayMezemur> createState() => _PlayMezemurState();
}

class _PlayMezemurState extends State<PlayMezemur> {
  bool isPlaying = false;
  late AudioPlayer play;
  late String path;
  Duration _duration = Duration();
  Duration _position = Duration();
  Timer? timer;

  @override
  void initState() {
    super.initState();
    initPlayer();
  }

  @override
  void dispose() {
    play.dispose();
    timer?.cancel();
    super.dispose();
  }

  Future<void> initPlayer() async {
    play = AudioPlayer();

    play.onDurationChanged.listen((Duration d) {
      setState(() {
        _duration = d;
      });
    });

    play.onPositionChanged.listen((Duration p) {
      setState(() {
        _position = p;
      });
    });

    play.onPlayerComplete.listen((event) {
      setState(() {
        isPlaying = false;
        _position = _duration;
      });
      stopTimer();
    });

    await play.setSourceUrl(widget.audioUrl);
  }

  void startTimer() {
    timer?.cancel();
    timer = Timer.periodic(const Duration(seconds: 1), (Timer timer) {
      if (_position < _duration) {
        setState(() {
          _position += const Duration(seconds: 1);
        });
      } else {
        stopTimer();
      }
    });
  }

  void stopTimer() {
    timer?.cancel();
  }

  void playPause() {
    if (isPlaying) {
      play.pause();
      stopTimer();
    } else {
      play.resume();
      startTimer();
    }
    setState(() {
      isPlaying = !isPlaying;
    });
  }

  void seekBackward() {
    final newPosition = _position - const Duration(seconds: 10);
    play.seek(newPosition);
    setState(() {
      _position = newPosition;
    });
  }

  void seekForward() {
    final newPosition = _position + const Duration(seconds: 10);
    play.seek(newPosition);
    setState(() {
      _position = newPosition;
    });
  }

  String _positionToString(Duration position) {
    final hours = position.inHours.toString().padLeft(2, '0');
    final minutes = (position.inMinutes % 60).toString().padLeft(2, '0');
    final seconds = (position.inSeconds % 60).toString().padLeft(2, '0');
    return '$hours:$minutes:$seconds';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(4),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.end,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Slider(
              value: _position.inSeconds.toDouble(),
              onChanged: (value) {
                final newPosition = Duration(seconds: value.toInt());
                play.seek(newPosition);
                setState(() {
                  _position = newPosition;
                });
              },
              min: 0,
              max: _duration.inSeconds.toDouble(),
              inactiveColor: Colors.grey,
              activeColor: const Color.fromRGBO(149, 117, 205, 1),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(_positionToString(_position)),
                Text(_positionToString(_duration)),
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                InkWell(
                  onTap: seekBackward,
                  child: const Icon(Icons.replay_10),
                ),
                const SizedBox(width: 15),
                InkWell(
                  onTap: playPause,
                  child: Icon(
                    isPlaying ? Icons.pause_circle : Icons.play_circle,
                    color: const Color.fromRGBO(149, 117, 205, 1),
                    size: 55,
                  ),
                ),
                const SizedBox(width: 15),
                InkWell(
                  onTap: seekForward,
                  child: const Icon(Icons.forward_10),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}







///------------------------------------///
// import 'dart:async';
// import 'package:audioplayers/audioplayers.dart';
// import 'package:flutter/material.dart';

// class PlayMezemur extends StatefulWidget {
//   const PlayMezemur({Key? key}) : super(key: key);

//   @override
//   State<PlayMezemur> createState() => _PlayMezemurState();
// }

// class _PlayMezemurState extends State<PlayMezemur> {
//   bool isPlaying = false;
//   late AudioPlayer play;
//   late String path;
//   Duration _duration = Duration();
//   Duration _position = Duration();
//   Timer? timer;

//   @override
//   void initState() {
//     super.initState();
//     initPlayer();
//   }

//   @override
//   void dispose() {
//     play.dispose();
//     timer?.cancel();
//     super.dispose();
//   }

//   Future<void> initPlayer() async {
//     play = AudioPlayer();

//     play.onDurationChanged.listen((Duration d) {
//       setState(() {
//         _duration = d;
//       });
//     });

//     play.onPositionChanged.listen((Duration p) {
//       setState(() {
//         _position = p;
//       });
//     });

//     play.onPlayerComplete.listen((event) {
//       setState(() {
//         isPlaying = false;
//         _position = _duration;
//       });
//       stopTimer();
//     });

//     path = 'audios/audio2.mp3';
//     await play.setSourceAsset(path);
//     await play.setReleaseMode(ReleaseMode.stop);
//   }

//   void startTimer() {
//     timer?.cancel();
//     timer = Timer.periodic(const Duration(seconds: 1), (Timer timer) {
//       if (_position < _duration) {
//         setState(() {
//           _position += const Duration(seconds: 1);
//         });
//       } else {
//         stopTimer();
//       }
//     });
//   }

//   void stopTimer() {
//     timer?.cancel();
//   }

//   void playPause() async {
//     if (isPlaying) {
//       await play.pause();
//       stopTimer();
//     } else {
//       await play.resume();
//       startTimer();
//     }
//     setState(() {
//       isPlaying = !isPlaying;
//     });
//   }

//   void seekBackward() async {
//     final newPosition = _position - const Duration(seconds: 10);
//     await play.seek(newPosition);
//     setState(() {
//       _position = newPosition;
//     });
//   }

//   void seekForward() async {
//     final newPosition = _position + const Duration(seconds: 10);
//     await play.seek(newPosition);
//     setState(() {
//       _position = newPosition;
//     });
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       body: Padding(
//         padding: const EdgeInsets.all(16),
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           crossAxisAlignment: CrossAxisAlignment.center,
//           children: [
//             const SizedBox(height: 40),
//             Slider(
//               value: _position.inSeconds.toDouble(),
//               onChanged: (value) async {
//                 final newPosition = Duration(seconds: value.toInt());
//                 await play.seek(newPosition);
//                 setState(() {
//                   _position = newPosition;
//                 });
//               },
//               min: 0,
//               max: _duration.inSeconds.toDouble(),
//               inactiveColor: Colors.grey,
//               activeColor: const Color.fromRGBO(149, 117, 205, 1),
//             ),
//             Row(
//               mainAxisAlignment: MainAxisAlignment.end,
//               children: [
//                 Text(_duration.toString()),
//               ],
//             ),
//             const SizedBox(height: 10),
//             Row(
//               mainAxisAlignment: MainAxisAlignment.center,
//               children: [
//                 InkWell(
//                   onTap: seekBackward,
//                   child: const Icon(Icons.replay_10),
//                 ),
//                 const SizedBox(width: 15),
//                 InkWell(
//                   onTap: playPause,
//                   child: Icon(
//                     isPlaying ? Icons.pause_circle : Icons.play_circle,
//                     color: const Color.fromRGBO(149, 117, 205, 1),
//                     size: 75,
//                   ),
//                 ),
//                 const SizedBox(width: 15),
//                 InkWell(
//                   onTap: seekForward,
//                   child: const Icon(Icons.forward_10),
//                 ),
//               ],
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
